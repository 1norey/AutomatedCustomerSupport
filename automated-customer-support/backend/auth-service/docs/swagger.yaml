openapi: 3.0.1
info:
  title: AutoSupport AI â€“ Auth API
  description: Secure authentication service with JWT and role-based access for the Automated Customer Support platform.
  version: 1.0.0
  contact:
    name: Project Maintainer
    email: norey@example.com

servers:
  - url: http://localhost:5000/api
    description: Development server

components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT

  schemas:
    User:
      type: object
      properties:
        id:
          type: string
        email:
          type: string
        role:
          type: string
          enum: [client, agent, admin]

    LoginRequest:
      type: object
      required:
        - email
        - password
      properties:
        email:
          type: string
        password:
          type: string

    SignupRequest:
      type: object
      required:
        - email
        - password
        - role
      properties:
        email:
          type: string
        password:
          type: string
        role:
          type: string
          enum: [client, agent, admin]

    AuthResponse:
      type: object
      properties:
        token:
          type: string
        user:
          $ref: '#/components/schemas/User'

paths:
  /auth/signup:
    post:
      tags:
        - Authentication
      summary: Register a new user
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SignupRequest'
      responses:
        201:
          description: Created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthResponse'
        400:
          description: Invalid input
        500:
          description: Server error

  /auth/login:
    post:
      tags:
        - Authentication
      summary: Log in and receive a JWT token
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LoginRequest'
      responses:
        200:
          description: Authenticated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthResponse'
        400:
          description: Invalid credentials
        500:
          description: Server error

  /users:
    get:
      tags:
        - Users
      summary: Get all users
      security:
        - bearerAuth: []
      responses:
        200:
          description: List of users
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/User'

  /users/{id}:
    put:
      tags:
        - Users
      summary: Update user role
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                role:
                  type: string
                  enum: [client, agent, admin]
      responses:
        200:
          description: Role updated
        400:
          description: Invalid role
        403:
          description: Unauthorized
        500:
          description: Server error

    delete:
      tags:
        - Users
      summary: Delete a user
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
      responses:
        200:
          description: User deleted
        403:
          description: Unauthorized
        500:
          description: Server error
